// Generated by Xata Codegen 0.29.3. Please do not edit.
import { buildClient } from '@xata.io/client';
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from '@xata.io/client';

const tables = [
  {
    name: 'Event',
    columns: [
      {
        name: 'name',
        type: 'string',
        notNull: true,
        defaultValue: 'Event Name',
      },
      {
        name: 'description',
        type: 'text',
        notNull: true,
        defaultValue: 'Event Description',
      },
      { name: 'date', type: 'datetime', notNull: true, defaultValue: 'now' },
      { name: 'location', type: 'string' },
      { name: 'owner', type: 'link', link: { table: 'UserProfile' } },
      { name: 'image', type: 'link', link: { table: 'EventImage' } },
    ],
    revLinks: [
      { column: 'event', table: 'Item' },
      { column: 'event', table: 'Rsvp' },
    ],
  },
  {
    name: 'Item',
    columns: [
      { name: 'event', type: 'link', link: { table: 'Event' } },
      { name: 'quantity', type: 'int', notNull: true, defaultValue: '1' },
      {
        name: 'name',
        type: 'string',
        notNull: true,
        defaultValue: 'Item Name',
      },
      { name: 'userId', type: 'string' },
    ],
  },
  {
    name: 'Rsvp',
    columns: [
      { name: 'event', type: 'link', link: { table: 'Event' } },
      { name: 'status', type: 'string', notNull: true, defaultValue: 'GOING' },
      { name: 'user', type: 'link', link: { table: 'UserProfile' } },
    ],
  },
  {
    name: 'UserProfile',
    columns: [
      { name: 'username', type: 'string', notNull: true, defaultValue: '' },
      { name: 'name', type: 'string', notNull: true, defaultValue: 'Name' },
    ],
    revLinks: [
      { column: 'owner', table: 'Event' },
      { column: 'user', table: 'Rsvp' },
    ],
  },
  {
    name: 'EventImage',
    columns: [{ name: 'file', type: 'file' }],
    revLinks: [{ column: 'image', table: 'Event' }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Event = InferredTypes['Event'];
export type EventRecord = Event & XataRecord;

export type Item = InferredTypes['Item'];
export type ItemRecord = Item & XataRecord;

export type Rsvp = InferredTypes['Rsvp'];
export type RsvpRecord = Rsvp & XataRecord;

export type UserProfile = InferredTypes['UserProfile'];
export type UserProfileRecord = UserProfile & XataRecord;

export type EventImage = InferredTypes['EventImage'];
export type EventImageRecord = EventImage & XataRecord;

export type DatabaseSchema = {
  Event: EventRecord;
  Item: ItemRecord;
  Rsvp: RsvpRecord;
  UserProfile: UserProfileRecord;
  EventImage: EventImageRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    'https://James-Q-Quick-s-workspace-l5kbra.us-east-1.xata.sh/db/potluck-pal',
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
